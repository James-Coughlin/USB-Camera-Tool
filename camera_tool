#!/usr/bin/env python3
"""
Author : jim <jim@localhost>
Date   : 2022-04-27
Purpose: Take pictures with USB camera
Version: v0.4
"""

import argparse
from typing import NamedTuple
import os
import numpy as np
import cv2
import imutils
import time



class Args(NamedTuple):
    """ Command-line arguments """
    directory: dir
    interval: int
    duration: int
    test: bool
    verbosity: bool
    video: bool
    videoFrames: int

# --------------------------------------------------
def get_args() -> Args:
    """ Get command-line arguments """

    parser = argparse.ArgumentParser(
        description='Take and store USB images',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('directory',
                        metavar='dir',
                        help='Storage directory for output photos')

    parser.add_argument('-i',
                        '--interval',
                        metavar='[int]',
                        help='Interval in seconds',
                        type=int,
                        default=5)

    parser.add_argument('-d',
                        '--duration',
                        metavar='[int]',
                        help='Duration of time in seconds to take pictures',
                        type=int,
                        default=15)

    parser.add_argument('--test',
                        action='store_true',
                        help='Runs the tool in test mode: Only takes one picture')
                        
    parser.add_argument('-v',
                        '--verbosity',
                        action='store_true',
                        help='Runs the tools in verbose mode')
    
    parser.add_argument('-vm',
                        '--videoMode',
                        action='store_true',
                        help='Creates a timelapse from the captures')
    
    parser.add_argument('-vf',
                        '--videoFrames',
                        metavar='FPS',
                        help='Frames per second for the timelapse',
                        type=int,
                        default=60)
    
    args = parser.parse_args()

    return Args(args.directory, args.interval, args.duration, args.test, args.verbosity, args.videoMode, args.videoFrames)

# --------------------------------------------------
def captureLoop(directory, duration, interval,v):
    ''' Defines the loop to take pictures '''
    if not os.path.isdir(directory + "/camera_1"):
        os.mkdir(directory + "/camera_1")

    img_dir = directory + "/camera_1"



    images = int(duration/interval)
    pic_time = [x * interval for x in list(range(images))]
    count = 0
    img_num = 0
    if v:
        print(f"Taking {images} pictures")

    cap = cv2.VideoCapture(0)
    while True:
        ret, frame = cap.read()
        
        if count == pic_time[img_num]:
            grabbed, still = cap.read()
            if v:
                print(f"Capturing {img_num} image")
            file_path = img_dir + "/capture_" + str(img_num) + ".png"
            cv2.imwrite(file_path, still)

            if img_num == (images - 1):
                cap.release()
                cv2.destroyAllWindows()
                print("Successfully taken all pictures")
                return
            
            img_num += 1
        
        # Wait 1 second and check conditions again
        time.sleep(1)
        count += 1


# --------------------------------------------------
def img2video(directory, camera, fps):

    os.chdir(directory + "/" + camera)

    images = []
    for f in os.listdir():
        if f.endswith('.png'):
            images.append(f)
    
    images.sort(key=lambda x: os.path.getmtime(x))


    # Determine the width and height from the first image
    frame = cv2.imread(images[0])
    height, width, channels = frame.shape

    # Define the codec and create a VideoWriter object
    output = camera + "_video.mp4"
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output, fourcc, fps, (width, height))
    
    # Make the video
    for image in images:
        frame = cv2.imread(image)
        out.write(frame)    

    out.release()
    cv2.destroyAllWindows()

    print("The output video is {}".format(output))


# --------------------------------------------------
def tests():
    """ Runs Various test procedures """
    if not os.path.isdir('temp'):
        os.mkdir('temp')

    storage = 'temp/test_capture.png'
    
    cap = cv2.VideoCapture(0)
    ret, frame = cap.read()
    cv2.imwrite(storage, frame)
    cap.release()
    
    print('Tests complete')
    
    exit()
# --------------------------------------------------
def main() -> None:
    """ Main controls the tool """

    # Get arguments from command line
    args = get_args()
    directory = args.directory
    duration = args.duration
    interval = args.interval
    test = args.test
    v = args.verbosity

    # Check for input directory
    if not os.path.isdir(directory):
        os.mkdir(directory)

    # Test Mode 
    if test:
        tests()

    # Picture Mode
    if True:
        print("Starting to take pictures...")
        captureLoop(directory, duration, interval,v)

    # Time Lapse Mode
    if args.video:
        print("Condensing images into video...")
        for camera in os.listdir(directory):
            img2video(directory, camera, args.videoFrames)


    exit()

# --------------------------------------------------
if __name__ == '__main__':
    main()
